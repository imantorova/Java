/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jhelp;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.TextEvent;
import java.awt.event.TextListener;
import java.awt.event.WindowAdapter;
import java.io.IOException;

/**
 * Class defines a process for all events what happens in client form.
 * @author <strong >Y.D.Zakovryashin</strong>, 2009
 * @version 1.0
 */
public class ClientListener extends WindowAdapter
        implements ActionListener, KeyListener, TextListener {

    private final Client client;

    /**
     * Single constructor of the class.
     * @param client references to client form
     */
    public ClientListener(Client client) {
        this.client = client;
    }

    /**
     * Method for processing of {@link java.awt.event.ActionEvent} events.
     * @param e reference to {@link java.awt.event.ActionEvent} event what happens
     * @see java.awt.event.ActionEvent
     * @see java.awt.event.ActionListener
     */
    @Override
    public void actionPerformed(ActionEvent e) {
                
        switch (e.getActionCommand()){
            case "Find":
                client.indOfOper = 1;//установка оператора в 1 для определения выборки
                client.connect();
                break;
                
            case "Add":
                client.indOfOper = 2;//установка оператора в 2 для определения выборки
                client.connect();
                
                break;
                
            case "Edit":
               client.indOfOper = 3; //установка оператора в 3 для определения выборки
               client.connect();
                
               break;
                
            case "Delete":
                client.indOfOper = 4;//установка оператора в 4 для определения выборки
                client.connect();
                
                 break;
                 
            case "Next":
                client.indOfOper = 5;//установка оператора в 5 для определения выборки
                client.connect();
                
                break;
                
            case "Prevous":
                client.indOfOper = 6;//установка оператора в 6 для определения выборки
                client.connect();
                
                break;
            
            case "choose"://выбор конфигурации
        {
            try {
                client.setConfig();
            } catch (IOException ex) {
                System.out.println("Error" + ex.getMessage());
            }
        }
                break;
                
            case "Save"://сохранение изменений в конфигурации в отдельный файл
        {
            try {
                client.saveConfig();
            } catch (IOException ex) {
                System.out.println("Error" + ex.getMessage());
            }
        }
                break;
                
            case "Cancel"://отмена внесенный в начальную конфигурацию изменений
                client.cancelConfig();
                break;
                
            case "Exit"://закрытие формы
                client.dispose();
                
        }
                  
        }
    
    
    /**
     * Method for processing of {@link java.awt.event.KeyEvent} event. The
     * method invokes in case a user pushes any keyboard button with typed symbol.
     * @param e reference to {@link java.awt.event.KeyEvent} event what happens
     * @see java.awt.event.KeyEvent
     * @see java.awt.event.KeyListener
     */
    @Override
    public void keyTyped(KeyEvent e) {
    }

    /**
     * Method for processing of {@link java.awt.event.KeyEvent} event.
     * The method invokes in case a user pushes but not releases any keyboard
     * button.
     * @param e reference to {@link java.awt.event.KeyEvent} event what happens
     * @see java.awt.event.KeyEvent
     * @see java.awt.event.KeyListener
     */
    @Override
    public void keyPressed(KeyEvent e) {
    }

    /**
     * Method for processing of {@link java.awt.event.KeyEvent} event. The
     * method invokes in case a user releases any keyboard button.
     * @param e reference to {@link java.awt.event.KeyEvent} event what happens
     * @see java.awt.event.KeyEvent
     * @see java.awt.event.KeyListener
     */
    @Override
    public void keyReleased(KeyEvent e) {
    }

    /**
     * This method are invoked when an object's text changed. This high-level
     * event is generated by an object (such as a TextComponent) when its text
     * changes.
     * @param e reference to {@link java.awt.event.TextEvent} event what happens
     * @see java.awt.event.TextEvent
     * @see java.awt.event.TextListener
     */
    @Override
    public void textValueChanged(TextEvent e) {
    }
}
